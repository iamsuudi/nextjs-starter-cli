#!/bin/bash

# Colors
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${CYAN}üöÄ Next.js Project Bootstrapper (pnpm only)${NC}"

# Step 1: Ask for Project Directory
read -p "$(echo -e ${YELLOW}Enter the project directory \(default: .\) '>' ${NC})" PROJECT_DIR
PROJECT_DIR=${PROJECT_DIR:-.}

# Check if the current directory is the same as the script location
if [ "$PROJECT_DIR" == "." ] && [ -f "./nextjs-setup.sh" ]; then
    echo -e "${RED}‚ùå You cannot create the Next.js app in the current directory as the setup script is located here.${NC}"
    echo -e "${YELLOW}Please choose a different directory for your Next.js project.${NC}"
    exit 1
fi

# Check if the directory already exists and is not empty
if [ -d "$PROJECT_DIR" ] && [ "$(ls -A "$PROJECT_DIR")" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è The directory '$PROJECT_DIR' is not empty! Do you want to proceed? (y/n)${NC}"
    read -r confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo -e "${RED}‚ùå Aborted! Please choose an empty directory or create a new one.${NC}"
        exit 1
    fi
fi




# Step 2: Create Next.js App using pnpm
echo -e "${GREEN}üöß Creating Next.js app in '${PROJECT_DIR}' using pnpm...${NC}"
pnpm dlx create-next-app@latest "$PROJECT_DIR" \--yes

cd "$PROJECT_DIR" || exit
echo -e "${GREEN}‚úÖ Entered project directory: $PROJECT_DIR${NC}"




# Step 3: shadcn/ui Setup
echo -e "\n${CYAN}üé® shadcn/ui Configuration${NC}"

read -p "$(echo -e ${YELLOW}Do you want to set up shadcn/ui? [y/N] '>' ${NC})" SHADCN_CHOICE

if [[ "$SHADCN_CHOICE" =~ ^[Yy]$ ]]; then
    echo -e "${GREEN}‚öôÔ∏è Initializing shadcn/ui...${NC}"
    
    # Run the official init command
    pnpm dlx shadcn@latest init
    
    # Add convenient CLI alias
    pnpm pkg set scripts.ui="pnpm dlx shadcn@latest"
    pnpm dlx shadcn@latest add button dropdown-menu
    
    # Install next-themes
    pnpm add next-themes
    
    # Create a theme provider
    mkdir -p "src/components"
    cat > "src/components/theme-provider.tsx" << 'EOL'
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
EOL
    echo -e "${GREEN}Theme Provider created!${NC}"
    
    # Add mode toggle component
    cat > "src/components/mode-toggle.tsx" << 'EOL'
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
EOL
    echo -e "${GREEN}Mode toggling component created!${NC}"
    
    # Wrap your root layout
            cat > "src/app/layout.tsx" << 'EOL'
import { ThemeProvider } from "../components/theme-provider";
import { ModeToggle } from "../components/mode-toggle";
import type { Metadata } from "next";
import "./globals.css";

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    return (
        <html lang="en" suppressHydrationWarning>
            <body className="font-sans">
                <ThemeProvider
                    attribute="class"
                    defaultTheme="system"
                    enableSystem
                    disableTransitionOnChange
                >
                  <ModeToggle />
                    {children}
                </ThemeProvider>
            </body>
        </html>
    );
}
EOL
    echo -e "${GREEN}Root layout is wrapped by ThemeProvider!${NC}"
    
    echo -e "${GREEN}\n‚úÖ shadcn/ui configured!${NC}\n"
else
    echo -e "${YELLOW}‚ö†Ô∏è Skipping shadcn/ui setup${NC}"
fi




# Step 4: Database Client Setup
echo -e "\n${CYAN}üöÄ Database Client Configuration${NC}"

# Determine project structure (src or no src)
CLIENT_BASE_DIR=$([ -d "src" ] && echo "src/lib" || echo "lib")
mkdir -p "$CLIENT_BASE_DIR"

while true; do
    echo -e "\n${CYAN}üìä Database Adapter Selection:${NC}"
    echo -e "1) Prisma + SQLite"
    echo -e "2) Drizzle + SQLite"
    echo -e "3) Skip database setup"
    read -p "$(echo -e ${YELLOW}Choose \(1-3\) '>' ${NC})" DB_CHOICE
    
    case $DB_CHOICE in
        1)
            # ===== PRISMA + SQLITE SETUP =====
            echo -e "${GREEN}üõ¢Ô∏è Initializing Prisma with SQLite...${NC}"
            
            # Install dependencies
            pnpm add @prisma/client
            pnpm add -D prisma
            
            # Initialize Prisma
            pnpm dlx prisma init \--datasource-provider sqlite \--output ../src/app/generated/prisma
            
            # Add Example model to schema
            cat > prisma/schema.prisma << 'EOL'
generator client {
  provider = "prisma-client-js"
  output = "./generated"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Example model (auto-generated by setup script)
model Example {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)

  @@map("examples")
}
EOL
            echo -e "${GREEN}‚úÖ Prisma initialized!${NC}"
            
            # Create optimized client
            cat > "$CLIENT_BASE_DIR/prisma.ts" << 'EOL'
import { PrismaClient } from '../../prisma/generated';

const globalForPrisma = global as unknown as {
    prisma: PrismaClient
};

const prisma = globalForPrisma.prisma || new PrismaClient();

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;

export default prisma;
EOL
            
            # Generate Prisma Client
            echo -e "${GREEN}‚öôÔ∏è Generating Prisma Client...${NC}"
            pnpm dlx prisma generate
            echo -e "${GREEN}‚úÖ Prisma (SQLite) ready!${NC}"
            break
        ;;
        2)
            # ===== DRIZZLE + SQLITE =====
            echo -e "${GREEN}üå™Ô∏è Initializing Drizzle with SQLite...${NC}"
            
            pnpm add drizzle-orm better-sqlite3
            pnpm add -D drizzle-kit
            
            # Create client file
            cat > "$CLIENT_BASE_DIR/drizzle.ts" << 'EOL'
import { drizzle } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';

const sqlite = new Database('./sqlite.db');
export const db = drizzle(sqlite);
EOL
            
            # Minimal config
            mkdir -p drizzle
            cat > drizzle/config.ts << 'EOL'
import type { Config } from "drizzle-kit";

export default {
    schema: "./schema.ts",
    out: "./migrations",
    driver: "better-sqlite",
    dbCredentials: {
        url: "./sqlite.db"
    },
} satisfies Config;
EOL
            
            echo -e "${GREEN}‚úÖ Drizzle (SQLite) ready!${NC}"
            echo -e "Run: npx drizzle-kit generate to create migrations${NC}"
            break
        ;;
        3)
            echo -e "${YELLOW}‚ö†Ô∏è Skipping database setup${NC}"
            break
        ;;
        *)
            echo -e "${RED}‚ùå Invalid choice. Please select 1-3${NC}"
            sleep 1
        ;;
    esac
done


# Step 5: Seeding Configuration
echo -e "\n${CYAN}üå± Database Seeding Setup${NC}"

# Only ask about seeding if database was configured
if [[ $DB_CHOICE =~ ^[12]$ ]]; then
    read -p "$(echo -e ${YELLOW}Add database seeding script? [y/N] '>' ${NC})" SEED_CHOICE
    
    if [[ "$SEED_CHOICE" =~ ^[Yy]$ ]]; then
        case $DB_CHOICE in
            1)
                # ===== PRISMA SEEDING =====
                cat > prisma/seed.ts << 'EOL'
import { PrismaClient } from './generated';

const prisma = new PrismaClient();

async function main() {
    // Add your seed data here
    console.log("üå± Seeding database...");
}

main()
    .then(async () => {
        await prisma.$disconnect();
    })
    .catch(async (error) => {
        console.error('[Prisma] ‚ùå Seed failed:', error)
        await prisma.$disconnect();
        process.exit(1);
    });
EOL
                # Add seed script to package.json
                pnpm pkg set scripts.seed="pnpm dlx tsx prisma/seed.ts"
                echo -e "${GREEN}‚úÖ Prisma seed script created!${NC}"
                echo -e "${YELLOW}Run with: pnpm seed${NC}"
            ;;
        esac
    else
        echo -e "${YELLOW}‚ö†Ô∏è Skipping seeding setup${NC}"
    fi
fi


# Step 6: Better-Auth Setup
echo -e "\n${CYAN}üîê Better-Auth Configuration${NC}"

if [[ $DB_CHOICE =~ ^[12]$ ]]; then
    read -p "$(echo -e ${YELLOW}Enable Better-Auth? [y/N] '>' ${NC})" AUTH_CHOICE
    
    if [[ "$AUTH_CHOICE" =~ ^[Yy]$ ]]; then
        echo -e "${GREEN}üõ°Ô∏è Configuring Better-Auth...${NC}"
        
        # Install core packages
        pnpm add better-auth
        
        # Env configuration
        echo -e "\n# Better-Auth" >> .env
        echo "BETTER_AUTH_SECRET=$(openssl rand -hex 32)" >> .env
        echo "BETTER_AUTH_URL=http://localhost:3000" >> .env
        
        # Create auth directory
        AUTH_DIR=$([ -d "src" ] && echo "src/lib" || echo "lib")
        
        # Config file based on DB adapter
        case $DB_CHOICE in
            1)
                # ===== PRISMA CONFIG =====
            cat > $AUTH_DIR/auth.ts << 'EOL'
import { betterAuth } from "better-auth";
import { prismaAdapter } from "better-auth/adapters/prisma";
import { PrismaClient } from "../../prisma/generated";

const prisma = new PrismaClient();
export const auth = betterAuth({
    database: prismaAdapter(prisma, {
        provider: "sqlite", // or "mysql", "postgresql", ...etc
    }),
});
EOL
                # Create Database Tables
                pnpm dlx @better-auth/cli generate
                
                # Add mount handler
                mkdir -p "src/app/api/auth/[...all]"
        cat > "src/app/api/auth/[...all]/route.ts" << 'EOL'
import { auth } from "@/lib/auth";
import { toNextJsHandler } from "better-auth/next-js";

export const { POST, GET } = toNextJsHandler(auth);
EOL
                
                # Create client instance
        cat > $AUTH_DIR/auth-client.ts << 'EOL'
import { auth } from "@/lib/auth";
import { toNextJsHandler } from "better-auth/next-js";

export const { POST, GET } = toNextJsHandler(auth);
EOL
            ;;
        esac
        
        # Add CLI script
        pnpm pkg set scripts.auth:gen="pnpm dlx @better-auth/cli generate"
        
        echo -e "${GREEN}‚úÖ Better-Auth configured!${NC}"
        echo "Run: pnpm auth:gen to generate types"
        
    else
        echo -e "${YELLOW}‚ö†Ô∏è Skipping authentication setup${NC}"
    fi
fi

echo -e "${GREEN}\n\nüéâ That's it. Your project is ready! üöÄüöÄüöÄ${NC}\n\n"